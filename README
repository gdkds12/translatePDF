
---

# **최종 프로그램 구조 – PDF 영어 원서 한국어 번역기 (레이아웃 유지)**

---

## 1. **프로그램 목표**

* 영어 PDF 문서에서 **텍스트만 한국어로 번역**
* **이미지, 도표, 전체 레이아웃은 원형 유지**
* 번역된 텍스트는 **기존 텍스트와 동일한 위치에 삽입**
* **10페이지 단위 직렬 처리**, API 안정성 확보

---

## 2. **전체 구성도 (모듈 기반)**

```
Main GUI
 ├── PDFLoader
 │     └─ PDF 청크(10p) 분할
 ├── ChunkProcessor (직렬 처리)
 │     ├─ AzureDocumentParser (텍스트+좌표 추출)
 │     ├─ TextBlockMerger (문단 재구성)
 │     ├─ Translator (Azure OpenAI GPT)
 │     ├─ LayoutEngine (텍스트 오버레이)
 │     └─ PageRenderer (PDF 페이지 조합)
 ├── Exporter
 │     └─ 최종 PDF 저장
 └── UIController
       └─ 진행 상태 / 미리보기 / 사용자 설정
```

---

## 3. **실행 흐름 단계**

### \[1] 사용자 입력

* PDF 파일 선택
* 옵션 설정: 출력 폰트, 번역 톤(격식/친근), Glossary 업로드
* 출력 경로 지정

---

### \[2] PDF 로딩 및 청크 분할

* 전체 페이지 수 파악
* 10페이지씩 청크 객체 구성: `Chunk(id=0, pages=1~10), ...`
* 각 청크는 처리 큐에 순서대로 삽입됨

---

### \[3] Chunk 처리 루프 (직렬)

**각 청크에 대해 아래 순서대로 처리됨:**

#### 3-1. **AzureDocumentParser**

* Azure Document Intelligence(Read v4) 호출
* 각 텍스트 블럭의 `텍스트 + (x, y, width, height)` 추출
* 블럭 단위 객체화: `Block(id, text, bbox, page)`

#### 3-2. **TextBlockMerger**

* 블럭들을 줄 단위 → 문단 단위로 병합
* 하이픈, 개행, 공백 등 전처리

#### 3-3. **Translator**

* 병합된 문단을 Azure OpenAI (GPT-4/4o)로 번역
* 번역 프롬프트:

  * 시스템 프롬프트: 문체·용어 설정 포함
  * Glossary: 사용자 제공 용어 우선 적용
* 결과는 원본 블럭 ID 기준으로 매핑

#### 3-4. **LayoutEngine**

* 원본 PDF 페이지를 배경 이미지로 렌더링
* 번역된 텍스트를 기존 좌표에 삽입

  * 폰트 크기 자동 조정
  * 줄바꿈 지원
  * 텍스트는 새로운 레이어로 오버레이

#### 3-5. **PageRenderer**

* 텍스트가 삽입된 페이지 → PDF 페이지 객체로 변환
* Chunk 단위 PDF 조각을 메모리에 누적 저장

---

### \[4] PDF 조합 및 저장

* 모든 청크가 처리되면 페이지를 순서대로 결합
* 사용자 지정 경로에 최종 PDF 저장

---

## 4. **GUI 구성 요약**

| 구성 요소         | 설명                       |
| ------------- | ------------------------ |
| **파일 입력 영역**  | PDF 업로드 및 기본 정보 표시       |
| **옵션 패널**     | 번역 톤, Glossary 등록, 출력 글꼴 |
| **미리보기 영역**   | 현재 번역 중인 페이지 실시간 렌더      |
| **진행 상태 표시줄** | 청크 진행률, 예상 소요 시간         |
| **결과 출력 버튼**  | 번역 완료 후 PDF 저장 트리거       |

---

## 5. **기술 스택**

| 목적      | 도구 / 라이브러리                           |
| ------- | ------------------------------------ |
| GUI     | PySide6 또는 PyQt6                     |
| PDF 분석  | Azure Document Intelligence          |
| 번역      | Azure OpenAI (GPT-4 / GPT-4o)        |
| PDF 조작  | PyMuPDF (`fitz`), reportlab (추가 삽입용) |
| 비동기 처리  | `asyncio` (하지만 직렬 루프)                |
| 데이터 모델링 | `pydantic` 또는 `dataclasses`          |

---

## 6. **처리 성능**

* **청크당 평균 처리 시간**: 약 60초
* **1200페이지 기준 총 예상 시간**: 약 2시간
* **안정성 확보**: API 호출 제한 회피, 재시도(backoff) 내장

---

## 7. **예외 처리 및 특수 케이스**

| 상황                  | 대응                                      |
| ------------------- | --------------------------------------- |
| 번역문 길이 초과           | 폰트 크기 자동 축소 + 줄바꿈                       |
| API 오류 (429, 503 등) | Exponential backoff 후 재시도 (최대 3회)       |
| 표/그림 겹침             | Document Intelligence에서 영역 구분 → 텍스트만 처리 |
| 수식/LaTeX            | 번역 불가 표시 또는 그대로 유지                      |

---

## 8. **파일 입출력 구조**

```plaintext
/input/sample.pdf                # 원본 PDF
/output/sample_translated.pdf    # 번역 완료본
/temp/chunk_001.json             # DI 결과
/temp/chunk_001_blocks.json      # 번역 대상 블럭
/temp/chunk_001_translated.json  # 번역 결과
```

---

## 9. **확장성 포인트**

* 병렬 처리(멀티 청크 동시 실행)
* Glossary 편집기 GUI 내장
* 텍스트 레이어 가시성 on/off
* 번역 결과 수동 편집 기능

---
